package study;

import java.util.Scanner;

public class BJ3190_Today {
	static int[][] map;
	static int n;//맵크기
	static int k;//사과개수
	static int l;//방향변환개수
	static Object[][] d;

	private static void move(int beforeR, int beforeC) {
		int rr = beforeR;
		int cc = beforeC;
		for (int a = len; a >= 1; a--) {
			int exit = 0;
			for (int i = 0; i < n; i++) {
				for (int j = 0; j < n; j++) {
					if (exit != 1) {
						if (i == rr && j == cc) {
							continue;
						} else {
							if (map[i][j] == a) {
								map[i][j]--;
								exit = 1;
								rr = i;
								cc = j;
							}
						}
					}
				}
			}
		}
	}

	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);

		n = in.nextInt();//맵 크기 입력
		k = in.nextInt();//사과 개수 입력
		
		// 사과(-1) 위치 설정
		map = new int[n][n];
		for (int i = 0; i < k; i++) {
			map[in.nextInt() - 1][in.nextInt() - 1] = -1;
		}

		l = in.nextInt();//방향 전환 개수
		
		// 방향 전환 정보 저장
		d = new Object[l][2];//방향 전환 시간(초), 방향(L or D) 
		for (int i = 0; i < l; i++) {
			d[i][0] = in.next();
			d[i][1] = in.next();
		}

		int second = 0;
		char currentD = 'R';
		int dCnt = 0;
		int curLen = 1;//현재 길이
		int r = 0;//머리위치 행
		int c = 0;//머리위치 열
		map[r][c] = 1;//머리 생성

		while (true) {
			second++;
			if (currentD == 'R') {
				if (c + 1 >= n || map[r][c + 1] > 0) {
					System.out.println(second);
					return;
				} else if (map[r][c + 1] == -1) {
					curLen++;
					map[r][c + 1] = curLen;
					c++;
				} else {
					map[r][c + 1] = curLen;
					move(r, c + 1);
					c++;
				}

			} else if (currentD == 'D') {
				if (r + 1 >= n || map[r + 1][c] > 0) {
					System.out.println(second);
					return;
				} else if (map[r + 1][c] == -1) {
					curLen++;
					map[r + 1][c] = curLen;
					r++;
				} else {
					map[r + 1][c] = curLen;
					move(r + 1, c);
					r++;
				}
			} else if (currentD == 'L') {
				if (c - 1 < 0 || map[r][c - 1] > 0) {
					System.out.println(second);
					return;
				} else if (map[r][c - 1] == -1) {
					curLen++;
					map[r][c - 1] = curLen;
					c--;
				} else {
					map[r][c - 1] = curLen;
					move(r, c - 1);
					c--;
				}
			} else if (currentD == 'U') {
				if (r - 1 < 0 || map[r - 1][c] > 0) {
					System.out.println(second);
					return;
				} else if (map[r - 1][c] == -1) {
					curLen++;
					map[r - 1][c] = curLen;
					r--;
				} else {
					map[r - 1][c] = curLen;
					move(r - 1, c);
					r--;
				}
			}

			if (dCnt < l) {
				if ((int)d[dCnt][0] == second) {
					if ((char)d[dCnt][1] == 'D') {
						if (currentD == 'R') {
							currentD = 'D';
						} else if (currentD == 'D') {
							currentD = 'L';
						} else if (currentD == 'L') {
							currentD = 'U';
						} else if (currentD == 'U') {
							currentD = 'R';
						}
					} else if ((char)d[dCnt][1] == 'L') {
						if (currentD == 'R') {
							currentD = 'U';
						} else if (currentD == 'D') {
							currentD = 'R';
						} else if (currentD == 'L') {
							currentD = 'D';
						} else if (currentD == 'U') {
							currentD = 'L';
						}
					}
					dCnt++;
				}
			}
			// print();
		} // end while
	}// end main

	private static void print() {
		System.out.println();
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				System.out.print(map[i][j] + "   ");
			}
			System.out.println();
		}
	}
}
