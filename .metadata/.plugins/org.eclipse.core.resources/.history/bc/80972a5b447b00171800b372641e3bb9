package problem.dfsbfs;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class P2178 {
	static int n, m, distance;
	static int[][] map;
	static ArrayList<Integer> distances = new ArrayList<>();

	public static void dfs(int curX, int curY, int length) {
		if(curY == n && curX == m){
			distances.add(length);
			return;
		}
		map[curX][curY] = 0; // 지나온길은 0 으로
		for(int x = curX; x <= n; x++){
			for(int y = curY; y <= m; y++){
				if (x + 1 <= m && map[y][x + 1] == 1) { // 오른쪽
					dfs(x + 1, y, length + 1);
				}
				if (y + 1 <= n && map[y + 1][x] == 1) { // 아래
					dfs(x, y + 1, length + 1);
				}
				if (y - 1 >= 1 && map[y - 1][x] == 1) { // 위
					dfs(x, y - 1, length + 1);
				}
				if (x - 1 >= 1 && map[y][x - 1] == 1) { // 왼쪽
					dfs(x - 1, y, length + 1);
				}
			}
		}
	}

	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		try {
			n = in.nextInt();
			m = in.nextInt();
			distance = n * m;
			map = new int[n + 1][m + 1];
			// 맵 입력
			in.nextLine();
			for (int i = 1; i <= n; i++) {
				String line = in.nextLine();
				for (int j = 1; j <= m; j++) {
					map[i][j] = Character.getNumericValue(line.charAt(j - 1));
				}
			}
			dfs(1, 1, 1);
		} finally {
			in.close();
			in = null;
		}
	}
}

// 예제 입력 복사
// 4 6
// 101111
// 101010
// 101011
// 111011
// 예제 출력 복사
// 15
// 예제 입력 2 복사
/*4 6
110110
110110
111111
111101*/
// 예제 출력 2 복사
// 9