package study;

import java.util.Scanner;

public class Hw1 {

	static int testCaseCnt;
	static int n;
	static int[][] num = new int[2][20];
	static boolean[] visited = new boolean[20];
	static long answer;
	static int arr1[][] = new int[2][10];
	static int arr2[][] = new int[2][10];

	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);

		testCaseCnt = in.nextInt();

		for (int testCase = 1; testCase <= testCaseCnt; testCase++) {
			init();

			n = in.nextInt();

			for (int i = 0; i < n; i++) {
				num[0][i] = in.nextInt();
				num[1][i] = in.nextInt();
			}

			execute(0, 0);

			System.out.println("#" + testCase + " " + answer);
		}
	}

	public static void init() {
		n = 0;
		answer = Long.MAX_VALUE;
	}

	public static void execute(int depth, int idx) {

		if (depth >= n / 2) {
			cal();
			return;
		}

		for (int i = idx; i < n; i++) {
			if (visited[i] == false) {
				visited[i] = true;
				execute(depth + 1, idx + 1);
				visited[i] = false;
			}
		}

	}

	public static void cal() {
		
		long[] sum = {0, 0};
		for(int i = 0; i < n; i++){
			if(visited[i] == true){
				sum[0] += num[0][i];
				sum[1] += num[1][i];
			}else{
				sum[0] -= num[0][i];
				sum[1] -= num[1][i];
			}
		}
		System.out.println(sum[0] + " " + sum[1]);
		answer = Math.min(answer, sum[0] * sum[0] + sum[1] * sum[1]);
	}
	
	void recursive( int idx, int num) {
		
		
		if (idx == N / 2) {		
			
			cal();
			return;
		}

		for (int i = num; i <= N; i++) {

			if (check[i] == 0) {
				check[i] = 1;
				arr[idx] = i;
				recursive(idx + 1, i+1);
				check[i] = 0;
			}
		}
		
	}

	
}





