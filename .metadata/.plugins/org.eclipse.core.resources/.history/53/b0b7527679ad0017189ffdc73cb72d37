package samsung.practice1;

import java.util.Scanner;

public class P14502_kj {
	static int n;
	static int m;
	static int[][] map = new int[8][8];
	static int[][] tempmap = new int[8][8];
<<<<<<< HEAD
	static int nowcount = 0;
=======
	static int nowcount;
	static boolean[][] visited;
	
>>>>>>> 460f67291a4ddb7304b3dd8b90a87d09e79bb951

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		n = sc.nextInt();
		m = sc.nextInt();

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				map[i][j] = sc.nextInt();
			}
		}

<<<<<<< HEAD
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				tempmap[i][j] = map[i][j];
			}
		}

		// spread(tempmap);
		// System.out.println(count(tempmap));
		// for (int i = 0; i < n; i++) {
		// for (int j = 0; j < m; j++) {
		// System.out.print(tempmap[i][j]);
		// System.out.print(" ");
		// }
		// System.out.println();
		// }

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (tempmap[i][j] == 0) {
					for (int i2 = 0; i2 < n; i2++) {
						for (int j2 = 0; j2 < m; j2++) {
							if (tempmap[i2][j2] == 0) {
								for (int i3 = 0; i3 < n; i3++) {
									for (int j3 = 0; j3 < m; j3++) {
										if (i3 != i && i3 != i2 && j3 != j && j3 != j2 && i2 != i && j2 != j
												&& tempmap[i3][j3] == 0) {
											tempmap[i][j] = 1;
											tempmap[i2][j2] = 1;
											tempmap[i3][j3] = 1;
											spread(tempmap);
											System.out.println(count(tempmap));
											//System.out.println(i+"/"+j+"_"+i2+"/"+j2+"_"+i3+"/"+j3+":"+count(tempmap));
											if (nowcount < count(tempmap))
												nowcount = count(tempmap);
											tempmap[i][j] = 0;
											tempmap[i2][j2] = 0;
											tempmap[i3][j3] = 0;
										}
=======
		for (int x = 0; x < n; x++) {
			for (int y = 0; y < m; y++) {
				tempmap[x][y] = map[x][y];
			}
		}
		nowcount = 0;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				for (int k = 0; k < n; k++) {
					for (int z = 0; z < m; z++) {
						for (int s = 0; s < n; s++) {
							for (int t = 0; t < m; t++) {
								if (map[i][j] == 0 && map[k][z] == 0 && map[s][t] == 0) {
									if (equal(i, j, k, z, s, t)) {
										tempmap[i][j] = 1;
										tempmap[k][z] = 1;
										tempmap[s][t] = 1;
										visited = new boolean[8][8];
										spread(tempmap);
										
										if (nowcount <= count(tempmap)){
											nowcount = count(tempmap);
										}
										//////////////////수정한 부분 start///////////////////
										for (int x = 0; x < n; x++) {
											for (int y = 0; y < m; y++) {
												tempmap[x][y] = map[x][y];
											}
										}
										//////////////////수정한 부분 end/////////////////////
>>>>>>> 460f67291a4ddb7304b3dd8b90a87d09e79bb951
									}
								}
							}
						}
					}
				}
			}
		}
		System.out.println(nowcount);
	}

<<<<<<< HEAD
	public static void spread(int[][] tempmap) { // 바이러스 확산
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (tempmap[i][j] == 2) {
					if (i - 1 >= 0 && j < m && tempmap[i - 1][j] == 0)
						tempmap[i - 1][j] = 2;
					if (i + 1 < n && j < m && tempmap[i + 1][j] == 0)
						tempmap[i + 1][j] = 2;
					if (j - 1 >= 0 && i < n && tempmap[i][j - 1] == 0)
						tempmap[i][j - 1] = 2;
					if (j + 1 < m && i < n && tempmap[i][j + 1] == 0)
						tempmap[i][j + 1] = 2;
=======
	public static boolean equal(int i, int j, int k, int z, int s, int t) { // 벽
																			// 3개
																			// 다
																			// 다른
																			// 위치인지
																			// 확인
		if (i == k && j == z)
			return false;
		else if (i == s && j == t)
			return false;
		else if (k == s && z == t)
			return false;
		else
			return true;
	}

	public static void spread(int[][] tempmap) { // 바이러스 확산
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (tempmap[i][j] == 2 && !visited[i][j]) {
					if (i - 1 >= 0 && tempmap[i - 1][j] == 0)
						tempmap[i - 1][j] = 2;
					if (i + 1 < n && tempmap[i + 1][j] == 0)
						tempmap[i + 1][j] = 2;
					if (j - 1 >= 0 && tempmap[i][j - 1] == 0)
						tempmap[i][j - 1] = 2;
					if (j + 1 < m && tempmap[i][j + 1] == 0)
						tempmap[i][j + 1] = 2;
					visited[i][j] = true;
					spread(tempmap);
>>>>>>> 460f67291a4ddb7304b3dd8b90a87d09e79bb951
				}
			}
		}
	}

	public static int count(int[][] tempmap) { // 감염 안된 칸 갯수 세기
		int count = 0;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (tempmap[i][j] == 0)
					count++;
			}
		}
		return count;
	}
<<<<<<< HEAD
}
=======
}
>>>>>>> 460f67291a4ddb7304b3dd8b90a87d09e79bb951
