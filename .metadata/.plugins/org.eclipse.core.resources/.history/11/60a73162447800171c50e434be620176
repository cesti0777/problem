package problem.dfsbfs;

import java.util.Scanner;

public class P2178 {
	static int n, m, min;
	static int[][] map;
	static boolean[][] visited;
	static boolean[][][][] edge;

	public static void makeEdge(int curX, int curY) {
		visited[curX][curY] = true;
		if (!visited[curX][curY + 1] && curY + 1 <= m && map[curX][curY + 1] == 1) {
			edge[curX][curY][curX][curY + 1] = true;
			makeEdge(curX, curY + 1);
		}
		if (!visited[curX + 1][curY] && curX + 1 <= n && map[curX + 1][curY] == 1) {
			edge[curX][curY][curX + 1][curY] = true;
			makeEdge(curX + 1, curY);
		}
		if (!visited[curX][curY - 1] && curY - 1 >= 1 && map[curX][curY - 1] == 1) {
			edge[curX][curY][curX][curY - 1] = true;
			makeEdge(curX, curY - 1);
		}
		if (!visited[curX - 1][curY] && curX - 1 >= 1 && map[curX - 1][curY] == 1) {
			edge[curX][curY][curX - 1][curY] = true;
			makeEdge(curX - 1, curY);
		}
	}

	public static void dfs(int curX, int curY) {
		visited[curX][curY] = true;
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= m; j++) {
				// if(!visited[n][m] && map){
				//
				// }
			}
		}
	}

	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		try {
			n = in.nextInt();
			m = in.nextInt();
			
			map = new int[n + 1][m + 1];
			visited = new boolean[n + 1][m + 1];
			edge = new boolean[n + 1][m + 1][n + 1][m + 1];
			// 맵 입력
			in.nextLine();
			for (int i = 1; i <= n; i++) {
				String line = in.nextLine();
				for (int j = 1; i <= m; j++) {
					map[i][j] = Character.getNumericValue(line.charAt(j-1));
				}
			}
			
			makeEdge(1, 1);

			dfs(1, 1);

		} finally {
			in.close();
			in = null;
		}
	}

}

// 예제 입력 복사
//4 6
//101111
//101010
//101011
//111011
// 예제 출력 복사
// 15
// 예제 입력 2 복사
// 4 6
// 110110
// 110110
// 111111
// 111101
// 예제 출력 2 복사
// 9