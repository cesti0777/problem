package samsung.practice1;

import java.util.Scanner;

public class P3190 {
	static int[][] map = new int[100][100];
	static int n;
	static int k;
	static int l;
	static int r;
	static int c;
	static String[][] d = new String[100][];
	static char currentD;
	static int second;
	static int dCnt;
	static int len;

	private static void print() {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				System.out.print("   " + map[i][j]);
			}
			System.out.println();
		}
	}

	private static void move(int beforeR, int beforeC) {
		int rr = beforeR;
		int cc = beforeC;
		for (int a = len; a >= 1; a--) {
			int exit = 0;
			for (int i = 0; i < n; i++) {
				for (int j = 0; j < n; j++) {
					if (exit != 1) {
						if (i == rr && j == cc) {
							continue;
						} else {
							if (map[i][j] == a) {
								map[i][j]--;
								exit = 1;

							}
						}
					}
				}
			}
		}
	}

	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);

		n = in.nextInt();
		k = in.nextInt();

		// 사과 위치 설정
		for (int i = 0; i < k; i++) {
			map[in.nextInt() - 1][in.nextInt() - 1] = -1;
		}

		l = in.nextInt();
		in.nextLine();
		// 변환 정보 저장
		for (int i = 0; i < l; i++) {
			d[i] = in.nextLine().split(" ");
		}

		second = 0;
		r = 0;
		c = 0;
		currentD = 'R';
		map[r][c] = 1;
		dCnt = 0;
		len = 1;

		while (true) {
			second++;
			if (currentD == 'R') {
				if (c + 1 >= n || map[r][c + 1] == 1) {
					System.out.println(second);
					return;
				} else if (map[r][c + 1] == -1) {
					len++;
					map[r][c + 1] = len;
					c++;
				} else {
					map[r][c + 1] = len;
					move(r, c + 1);
					c++;
				}

			} else if (currentD == 'D') {
				if (r + 1 >= n || map[r + 1][c] == 1) {
					System.out.println(second);
					return;
				} else if (map[r + 1][c] == -1) {
					len++;
					map[r + 1][c] = len;
					r++;
				} else {
					map[r + 1][c] = len;
					move(r + 1, c);
					r++;
				}
			} else if (currentD == 'L') {
				if (c - 1 < 0 || map[r][c] == 1) {
					System.out.println(second);
					return;
				} else if (map[r][c - 1] == -1) {
					len++;
					map[r][c - 1] = len;
					c--;
				} else {
					map[r][c - 1] = len;
					move(r, c - 1);
					c--;
				}
			} else if (currentD == 'U') {
				if (r - 1 < 0 || map[r][c] == 1) {
					System.out.println(second);
					return;
				} else if (map[r - 1][c] == -1) {
					len++;
					map[r - 1][c] = len;
					r--;
				} else {
					map[r - 1][c] = len;
					move(r - 1, c);
					r--;
				}
			}

			if (Integer.parseInt(d[dCnt][0]) == second) {
				if (d[dCnt][1].equals("D")) {
					if (currentD == 'R') {
						currentD = 'D';
					} else if (currentD == 'D') {
						currentD = 'L';
					} else if (currentD == 'L') {
						currentD = 'U';
					} else if (currentD == 'U') {
						currentD = 'R';
					}
				} else if (d[dCnt][1].equals("L")) {
					if (currentD == 'R') {
						currentD = 'U';
					} else if (currentD == 'D') {
						currentD = 'R';
					} else if (currentD == 'L') {
						currentD = 'D';
					} else if (currentD == 'U') {
						currentD = 'L';
					}
				}
				dCnt++;
			}
		} // end while
	}// end main

}
