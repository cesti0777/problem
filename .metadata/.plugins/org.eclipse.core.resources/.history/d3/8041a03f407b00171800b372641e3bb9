package problem.dfsbfs;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class P2178 {
	static int n, m, distance;
	static int[][] map;

	public static void dfs(int curY, int curX) {
		Queue<String> q = new LinkedList<>();
		map[curY][curX] = 0; // 지나온길은 0 으로
		q.add(curX+","+curY);
		distance++;
		for(int y = curY; y <= n; y++){
			for(int x = curX; x <= m; x++){
				if(y == n && x == m){
					System.out.println(distance);
				}
				String[] here = q.remove().split(",");
				int hereX = Integer.parseInt(here[0]);
				int hereY = Integer.parseInt(here[1]);
				if (hereX + 1 <= m && map[hereY][hereX + 1] == 1) { // 오른쪽
					map[curY][hereX + 1] = 0;
					q.add((hereX + 1)+","+curY);
					distance++;
				}
				if (hereY + 1 <= n && map[hereY + 1][hereX] == 1) { // 아래
					map[hereY + 1][curX] = 0;
					q.add(curX+","+(hereY + 1));
					distance++;
				}
				if (hereY - 1 >= 1 && map[hereY - 1][hereX] == 1) { // 위
					map[hereY - 1][curX] = 0;
					q.add(curX+","+(hereY - 1));
					distance++;
				}
				if (hereX - 1 >= 1 && map[hereY][hereX - 1] == 1) { // 왼쪽
					map[curY][hereX - 1] = 0;
					q.add((hereX - 1)+","+curY);
					distance++;
				}
			}
		}
	}

	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		try {
			n = in.nextInt();
			m = in.nextInt();
			distance = 0;
			map = new int[n + 1][m + 1];
			// 맵 입력
			in.nextLine();
			for (int i = 1; i <= n; i++) {
				String line = in.nextLine();
				for (int j = 1; j <= m; j++) {
					map[i][j] = Character.getNumericValue(line.charAt(j - 1));
				}
			}
			dfs(1, 1);
		} finally {
			in.close();
			in = null;
		}
	}
}

// 예제 입력 복사
// 4 6
// 101111
// 101010
// 101011
// 111011
// 예제 출력 복사
// 15
// 예제 입력 2 복사
//4 6
//110110
//110110
//111111
//111101
// 예제 출력 2 복사
// 9