package samsung.practice1;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class P13460_new {
	static int y;
	static int x;
	static char map[][] = new char[10][10];
	static boolean[][][][] visited = new boolean[10][10][10][10];
	static int rY, rX, bY, bX;
	static int[] dY = {-1, 1, 0, 0};
	static int[] dX = {0, 0, -1, 1};
	
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		
		y = in.nextInt();
		x = in.nextInt();
		in.nextLine();
		
		for(int i = 0; i < y; i++){
			String line = in.nextLine();
			for(int j = 0; j < x; j++){
				map[i][j] = line.charAt(j);
				if(map[i][j] == 'R'){
					rY = i;
					rX = j;
				} else if(map[i][j] == 'B'){
					bY = i;
					bX = j;
				}
			}
		}
		
		//print(map);
		
		Queue<Data> q = new LinkedList<Data>();
		q.add(new Data(rY, rX, bY, bX, 0));
		
		while(!q.isEmpty()){
			Data d = q.remove();
			int rCurY = 0;
			int rCurX = 0;
			int bCurY = 0;
			int bCurX = 0;
			boolean rGole = false;
			boolean bGole = false;
			
			for(int i = 0; i < 4; i++){
				//R 굴리기, 공 겹치는 경우 고려 x
				while(true){
					rCurY = d.rY + dY[i];
					rCurX = d.rX + dX[i];
					
					if(map[rCurY][rCurX] == '.'){//길이면 계속 굴려
						continue;
					}else if(map[rCurY][rCurX] == '#'){//벽이면 이전 좌표로 복귀하고 그만 굴려
						rCurY = d.rY - dY[i];
						rCurX = d.rX - dX[i];
						break;
					}else if(map[rCurY][rCurX] == 'O'){//골이면 flag 바꾸고 그만 굴려
						rGole = true;
						break;
					}
				}
				
				//B 굴리기, 공 겹치는 경우 고려 x
				while(true){
					bCurY = d.bY + dY[i];
					bCurX = d.bX + dX[i];
					
					if(map[bCurY][bCurX] == '.'){//길이면 계속 굴려
						continue;
					}else if(map[bCurY][bCurX] == '#'){//벽이면 이전 좌표로 복귀하고 그만 굴려
						bCurY = d.rY - dY[i];
						bCurX = d.rX - dX[i];
						break;
					}else if(map[bCurY][bCurX] == 'O'){//골이면 flag 바꾸고 그만 굴려
						bGole = true;
						break;
					}
				}
				
				if(bGole == true){
					continue;
				}
				
				if(rGole == true){
					if(d.cnt + 1 <= 10){
						System.out.println(d.cnt + 1);
						return;
					}else{
						System.out.println(-1);
						return;
					}
				}
				
				if(visited[rCurY][rCurX][bCurY][bCurX] != true){
					q.add(new Data(rCurY, rCurX, bCurY, bCurX, d.cnt++));
				}
			
			}
		}
	}
	
	
	public static void print(char[][] arr){
		System.out.println();
		for(int i = 0; i < y; i++){
			for(int j = 0; j < x; j++){
				System.out.print(arr[i][j]);
			}
			System.out.println();
		}
	}

	public static class Data{
		int rY, rX, bY, bX, cnt;
		
		public Data() {}
		
		public Data(int rY, int rX, int bY, int bX, int cnt) {
			this.rY = rY;
			this.rX = rX;
			this.bY = bY;
			this.bX = bX;
			this.cnt = cnt;
		}
	}
}
