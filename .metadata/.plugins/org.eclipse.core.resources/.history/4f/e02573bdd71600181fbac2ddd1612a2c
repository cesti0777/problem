package study;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class SE1953_Today {

	final static int UP = 100;
	final static int DOWN = 101;
	final static int LEFT = 102;
	final static int RIGHT = 103;

	static int testCaseCnt;// testcase 개수
	static int n, m, r, c, l;
	static int[][] map;
	static int answer;

	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);

		testCaseCnt = in.nextInt();// testcase 개수 입력

		for (int testCase = 1; testCase <= testCaseCnt; testCase++) {

			n = in.nextInt();
			m = in.nextInt();
			r = in.nextInt();
			c = in.nextInt();
			l = in.nextInt();

			map = new int[n][m];
			for (int i = 0; i < n; i++) {
				for (int j = 0; j < m; j++) {
					map[i][j] = in.nextInt();
				}
			}

			answer = 0;

			execute(1);// 실행

			System.out.println("#" + testCase + " " + answer);
		}
	}

	public static void execute(int h) {
		Queue<Integer> q = new LinkedList<>();
		q.add(r);
		q.add(c);
		q.add(h);
		
		while(!q.isEmpty()){
			int curR = q.remove();
			int curC = q.remove();
			int curH = q.remove();
			
			if (h > l) {// 탈출 조건
				return;
			}

			int curPipe = map[curR][curC];// 현재 위치 파이프 종류 저장
			map[curR][curC] = 0;// 현재 위치 방문 체크
			answer++;
			
			
			print();
			System.out.println(curH);

			if (curR - 1 >= 0 && map[curR - 1][curC] != 0 && isPossible(curPipe, map[curR - 1][curC], UP)) {// 상
				q.add(curR - 1);
				q.add(curC);
				q.add(curH + 1);
			}
			if (curR + 1 < n && map[curR + 1][curC] != 0 && isPossible(curPipe, map[curR + 1][curC], DOWN)) {// 하
				q.add(curR + 1);
				q.add(curC);
				q.add(curH + 1);
			}
			if (curC - 1 >= 0 && map[curR][curC - 1] != 0 && isPossible(curPipe, map[curR][curC - 1], LEFT)) {// 좌
				q.add(curR);
				q.add(curC - 1);
				q.add(curH + 1);
			}
			if (curC + 1 < m && map[curR][curC + 1] != 0 && isPossible(curPipe, map[curR][curC + 1], RIGHT)) {// 우
				q.add(curR);
				q.add(curC + 1);
				q.add(curH + 1);
			}
		}
	}

	public static boolean isPossible(int curPipe, int afterPipe, int d) {
		if (curPipe == 1) {// 상하좌우
			if (d == UP && (afterPipe == 1 || afterPipe == 2 || afterPipe == 5 || afterPipe == 6)) {
				return true;
			} else if (d == DOWN && (afterPipe == 1 || afterPipe == 2 || afterPipe == 4 || afterPipe == 7)) {
				return true;
			} else if (d == LEFT && (afterPipe == 1 || afterPipe == 3 || afterPipe == 4 || afterPipe == 5)) {
				return true;
			} else if (d == RIGHT && (afterPipe == 1 || afterPipe == 3 || afterPipe == 6 || afterPipe == 7)) {
				return true;
			}
		} else if (curPipe == 2) {// 상하
			if (d == UP && (afterPipe == 1 || afterPipe == 2 || afterPipe == 5 || afterPipe == 6)) {
				return true;
			} else if (d == DOWN && (afterPipe == 1 || afterPipe == 2 || afterPipe == 4 || afterPipe == 7)) {
				return true;
			}
		} else if (curPipe == 3) {// 좌우
			if (d == LEFT && (afterPipe == 1 || afterPipe == 3 || afterPipe == 4 || afterPipe == 5)) {
				return true;
			} else if (d == RIGHT && (afterPipe == 1 || afterPipe == 3 || afterPipe == 6 || afterPipe == 7)) {
				return true;
			}
		} else if (curPipe == 4) {// 상우
			if (d == UP && (afterPipe == 1 || afterPipe == 2 || afterPipe == 5 || afterPipe == 6)) {
				return true;
			}else if (d == RIGHT && (afterPipe == 1 || afterPipe == 3 || afterPipe == 6 || afterPipe == 7)) {
				return true;
			}
		} else if (curPipe == 5) {// 하우
			if (d == DOWN && (afterPipe == 1 || afterPipe == 2 || afterPipe == 4 || afterPipe == 7)) {
				return true;
			}else if (d == RIGHT && (afterPipe == 1 || afterPipe == 3 || afterPipe == 6 || afterPipe == 7)) {
				return true;
			}
		} else if (curPipe == 6) {// 하좌
			if (d == DOWN && (afterPipe == 1 || afterPipe == 2 || afterPipe == 4 || afterPipe == 7)) {
				return true;
			} else if (d == LEFT && (afterPipe == 1 || afterPipe == 3 || afterPipe == 4 || afterPipe == 5)) {
				return true;
			}
		} else {// 상좌
			if (d == UP && (afterPipe == 1 || afterPipe == 2 || afterPipe == 5 || afterPipe == 6)) {
				return true;
			}else if (d == LEFT && (afterPipe == 1 || afterPipe == 3 || afterPipe == 4 || afterPipe == 5)) {
				return true;
			}
		}
		return false;
	}
	public static void print(){
		System.out.println();
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				System.out.print(map[i][j]);
			}
		System.out.println();
		}
		
	}
}
