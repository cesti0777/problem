package samsung.practice1;

import java.util.Scanner;

public class P14503_kj {
	public static int n; // 가로
	public static int m; // 세로
	public static int r;
	public static int c;
	public static int d; // 0북 1동 2남 3서
	public static int[][] map = new int[50][50];
	public static int[][] visited = new int[50][50];
	public static int count = 0;

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		String line = sc.nextLine();
		n = Integer.parseInt(line.split(" ")[0]);
		m = Integer.parseInt(line.split(" ")[1]);
		line = sc.nextLine();
		r = Integer.parseInt(line.split(" ")[0]);
		c = Integer.parseInt(line.split(" ")[1]);
		d = Integer.parseInt(line.split(" ")[2]);
		for (int i = 0; i < n; i++) {
			line = sc.nextLine();
			for (int j = 0; j < m; j++) {
				map[i][j] = Integer.parseInt(line.split(" ")[j]);
			}
		}

		// r은 북쪽으로 부터 떨어진 칸 / c는 서쪽으로부터 떨어진 칸
		// r은 행, c는 열을 의미! (r,c)=(1,1)이면 좌표상 1,1이 맞음
		visited[r][c] = 1;
		count++;
		count++;
		// 0북 1동 2남 3서
		// 북 r-1 / 동 c+1 / 남 r+1 / 서 c-1
		// 북-서-남-동 순으로 돈다
		// 0-3-2-1
		robot(d);
		int max = 0;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				max = Math.max(max, visited[i][j]);
			}
		}
//		for (int i = 0; i < n; i++) {
//			for (int j = 0; j < m; j++) {
//				System.out.print("   " + visited[i][j]);
//			}
//			System.out.println();
//		}
		System.out.println(max);
	}

	public static void robot(int d) {
		switch (d) {
		case 0: // 북->서
			if (visited[r][c - 1] == 0 && map[r][c - 1] == 0) {
				c--;
				visited[r][c] = count;
				count++;
				d = 3;
				robot(d);
			} else if (visited[r + 1][c] == 0 && map[r + 1][c] == 0) {
				d = 3;
				robot(d);
			} else if (visited[r][c + 1] == 0 && map[r][c + 1] == 0) {
				d = 2;
				robot(d);
			} else if (visited[r - 1][c] == 0 && map[r - 1][c] == 0) {
				d = 1;
				robot(d);
			} else if (map[r + 1][c] == 0) {
				r++;
				robot(d);
			} else {
				break;
			}
		case 1: // 동->북
			if (visited[r - 1][c] == 0 && map[r - 1][c] == 0) {
				r--;
				visited[r][c] = count;
				count++;
				d = 0;
				robot(d);
			} else if (visited[r][c - 1] == 0 && map[r][c - 1] == 0) {
				d = 0;
				robot(d);
			} else if (visited[r + 1][c] == 0 && map[r + 1][c] == 0) {
				d = 3;
				robot(d);
			} else if (visited[r][c + 1] == 0 && map[r][c + 1] == 0) {
				d = 2;
				robot(d);
			} else if (map[r][c - 1] == 0) {
				c--;
				robot(d);
			} else {
				break;
			}
		case 2:// 남->동
			if (visited[r][c + 1] == 0 && map[r][c + 1] == 0) {
				c++;
				visited[r][c] = count;
				count++;
				d = 1;
				robot(d);
			} else if (visited[r - 1][c] == 0 && map[r - 1][c] == 0) {
				d = 1;
				robot(d);
			} else if (visited[r][c - 1] == 0 && map[r][c - 1] == 0) {
				d = 0;
				robot(d);
			} else if (visited[r + 1][c] == 0 && map[r + 1][c] == 0) {
				d = 3;
				robot(d);
			} else if (map[r - 1][c] == 0) {
				r--;
				robot(d);
			} else {
				break;
			}
		case 3:// 서->남
			if (visited[r + 1][c] == 0 && map[r + 1][c] == 0) {
				r++;
				visited[r][c] = count;
				count++;
				d = 2;
				robot(d);
			} else if (visited[r][c + 1] == 0 && map[r][c + 1] == 0) {
				d = 2;
				robot(d);
			} else if (visited[r - 1][c] == 0 && map[r - 1][c] == 0) {
				d = 1;
				robot(d);
			} else if (visited[r][c - 1] == 0 && map[r][c - 1] == 0) {
				d = 0;
				robot(d);
			} else if (map[r][c + 1] == 0) {
				c++;
				robot(d);
			} else {
				break;
			}
		}
	}
}