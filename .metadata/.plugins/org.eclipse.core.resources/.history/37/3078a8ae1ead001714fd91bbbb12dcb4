package samsung.practice1;

import java.util.Scanner;

public class P14502_kj {
	static int n;
	static int m;
	static int[][] map = new int[8][8];
	static int[][] tempmap = new int[8][8];
	static int nowcount;
	static boolean[][] visited;
	
	public static void print(int[][] arr){
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				System.out.print(arr[i][j]); 
			}
			System.out.println();
		}
	}

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		n = sc.nextInt();
		m = sc.nextInt();

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				map[i][j] = sc.nextInt();
			}
		}

		for (int x = 0; x < n; x++) {
			for (int y = 0; y < m; y++) {
				tempmap[x][y] = map[x][y];
			}
		}
		nowcount = 0;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				for (int k = 0; k < n; k++) {
					for (int z = 0; z < m; z++) {
						for (int s = 0; s < n; s++) {
							for (int t = 0; t < m; t++) {
								if (map[i][j] == 0 && map[k][z] == 0 && map[s][t] == 0) {
									if (equal(i, j, k, z, s, t)) {
										tempmap[i][j] = 1;
										tempmap[k][z] = 1;
										tempmap[s][t] = 1;
										visited = new boolean[8][8];
										spread(tempmap);
										
										
										print(tempmap);
										System.out.println();
										
										
										
										if (nowcount <= count(tempmap)){
											nowcount = count(tempmap);
										}
										
										for (int x = 0; x < n; x++) {
											for (int y = 0; y < m; y++) {
												tempmap[x][y] = map[x][y];
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		System.out.println(nowcount);
	}

	public static boolean equal(int i, int j, int k, int z, int s, int t) { // 벽
																			// 3개
																			// 다
																			// 다른
																			// 위치인지
																			// 확인
		if (i == k && j == z)
			return false;
		else if (i == s && j == t)
			return false;
		else if (k == s && z == t)
			return false;
		else
			return true;
	}

	public static void spread(int[][] tempmap) { // 바이러스 확산
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (tempmap[i][j] == 2 && !visited[i][j]) {
					if (i - 1 >= 0 && tempmap[i - 1][j] == 0)
						tempmap[i - 1][j] = 2;
					if (i + 1 < n && tempmap[i + 1][j] == 0)
						tempmap[i + 1][j] = 2;
					if (j - 1 >= 0 && tempmap[i][j - 1] == 0)
						tempmap[i][j - 1] = 2;
					if (j + 1 < m && tempmap[i][j + 1] == 0)
						tempmap[i][j + 1] = 2;
					visited[i][j] = true;
					spread(tempmap);
				}
			}
		}
	}

	public static int count(int[][] tempmap) { // 감염 안된 칸 갯수 세기
		int count = 0;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (tempmap[i][j] == 0)
					count++;
			}
		}
		return count;
	}
}