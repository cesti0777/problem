package study;

import java.util.ArrayList;
import java.util.Scanner;

public class SE2806 {

	static int testCaseCnt;// testcase 개수
	static int n;
	static int answer;
	static int[][] map;
	static CheckedQeen[] visited;

	public static void main(String[] args) {

		Scanner in = new Scanner(System.in);

		testCaseCnt = in.nextInt();// testcase 개수 입력

		for (int testCase = 1; testCase <= testCaseCnt; testCase++) {

			n = in.nextInt();

			answer = 0;
			map = new int[n][n];
			visited = new CheckedQeen[n];

			execute();// 실행

			System.out.println("#" + testCase + " " + answer);
		}
	}

	public static void execute() {

		if (n == 1) {
			answer = 1;
			return;
		}

		// nCr개의 조합을 표현할 배열, 빈 배열에 앞쪽부터 채우면서 조합생성
		// 각 조합이 포함한 번호는 map배열의 인덱스로 쓰임
		int[] comArr = new int[n * n];

		// nC1 ~ nCr 까지의 조합 계산
		// ex)4C3 -> 4C1, 4C2, 4C3
		combination(comArr, 0, n * n, n, 0);
	}

	public static void combination(int[] comArr, int idx, int n, int r, int targetNum) {

		if (r == 0) {// 모든 수를 다 뽑았으면
			answer++;
			// print(comArr, idx);
			// cal(comArr, idx);// 계산
		} else if (n == targetNum) {// 사용할 수가 바닥난 상태
			return;
		} else {
			comArr[idx] = targetNum;
			map[comArr[idx] / n][comArr[idx] % n] = 1;
			if (isCollision(comArr, idx)) {
				map[comArr[idx] / n][comArr[idx] % n] = 0;
				return;
			}
			combination(comArr, idx + 1, n, r - 1, targetNum + 1);
			combination(comArr, idx, n, r, targetNum + 1);
		}
	}

	public static boolean isCollision(int[] comArr, int idx) {

		int i = comArr[idx] / n;
		int j = comArr[idx] % n;
		
		// 공격 가능여부 계산
		if (map[i][j] == 1) {
			// i열검사
			for (int k = 0; k < n; k++) {
				if (i == k) {
					continue;
				}
				if (map[k][j] == 1) {
					return true;
				}
			}

			// j행검사
			for (int k = 0; k < n; k++) {
				if (j == k) {
					continue;
				}
				if (map[i][k] == 1) {
					return true;
				}
			}

			// 대각검사1
			int a = i - 1;
			int b = j - 1;
			while (a >= 0 && b >= 0) {// 좌상
				if (map[a][b] == 1) {
					return true;
				}
				a--;
				b--;
			}
			a = i + 1;
			b = j + 1;
			while (a < n && b < n) {// 우하
				if (map[a][b] == 1) {
					return true;
				}
				a++;
				b++;
			}

			// 대각검사2
			a = i - 1;
			b = j + 1;
			while (a >= 0 && b < n) {// 우상
				if (map[a][b] == 1) {
					return true;
				}
				a--;
				b++;
			}
			a = i + 1;
			b = j - 1;
			while (a < n && b >= 0) {// 좌하
				if (map[a][b] == 1) {
					return true;
				}
				a++;
				b--;
			}
		}
		// answer++;
		return false;
	}

	// public static void print(int[] comArr, int idx) {
	//
	// for (int i = 0; i < idx; i++) {
	// System.out.print(comArr[i] + " ");
	// }
	// System.out.println();
	// }
	//
	// public static void printMap(int[][] map) {
	//
	// for (int i = 0; i < n; i++) {
	// for (int j = 0; j < n; j++) {
	// System.out.print(map[i][j] + " ");
	// }
	// System.out.println();
	// }
	// System.out.println();
	// }
	// }

}
