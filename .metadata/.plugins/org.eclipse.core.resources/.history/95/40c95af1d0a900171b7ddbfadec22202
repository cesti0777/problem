package samsung.practice1;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class P13460BFS {
	static char[][] map = new char[101][101];
	static boolean visited[][][][] = new boolean[11][11][11][11];
	static int n = 0;
	static int m = 0;
	static int[] locationR = new int[2];
	static int[] locationB = new int[2];
	static int[] locationO = new int[2];

	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		n = in.nextInt();
		m = in.nextInt();
		in.nextLine();

		// map 입력
		for (int i = 1; i <= n; i++) {
			String line = in.nextLine();
			for (int j = 1; j <= m; j++) {
				map[i][j] = line.charAt(j - 1);
			}
		}

		// R,B,O 초기 좌표 저장
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= m; j++) {
				if (map[i][j] == 'R') {
					locationR[0] = j;
					locationR[1] = i;
				} else if (map[i][j] == 'B') {
					locationB[0] = j;
					locationB[1] = i;
				} else if (map[i][j] == 'O') {
					locationO[0] = j;
					locationO[1] = i;
				}
			}
		}

		bfs(locationR[0], locationR[1], locationB[0], locationB[1], 0);

	}

	static void printMap() {
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= m; j++) {
				System.out.print(map[i][j]);
			}
			System.out.println();
		}
	}

	static void bfs(int curXR, int curYR, int curXB, int curYB, int cnt) {
		Queue<Integer> q = new LinkedList<>();
		int xR, yR, xB, yB;
		int bGoal;
		int tmpR, tmpB;
		q.add(curXR);
		q.add(curYR);
		q.add(curXB);
		q.add(curYB);
		q.add(cnt);

		while (!q.isEmpty()) {
			curXR = q.remove();
			curYR = q.remove();
			curXB = q.remove();
			curYB = q.remove();
			cnt = q.remove();

//			System.out.print(curXR);
//			System.out.print(curYR);
//			System.out.print(curXB);
//			System.out.print(curYB);
//			System.out.print(cnt);
//			System.out.println();

			// 카운트 초과
			if (cnt == 10) {
				System.out.println(-1);
				return;
			}
			if (visited[curXR][curYR][curXB][curYB] != true) {
				visited[curXR][curYR][curXB][curYB] = true;
				// 상
				if (curXR == curXB) {//RB 같은 열에 있으면
					if (curYR < curYB) {//R이 위에 있으면
						//R 상방 확인
						xR = yR = xB = yB = bGoal = tmpR = tmpB = 0;
						while (true) {
							tmpR++;
							if (map[curYR - tmpR][curXR] == '#') {//상벽에 닿으면
								xR = curXR;
								yR = curYR - tmpR + 1;
								break;
							} else if (map[curYR - tmpR][curXR] == '.') {//길이 있으면
								continue;
							} else if (map[curYR - tmpR][curXR] == 'O') {//골이면
								int checkB = 0;
								while (true) {//B가 같이 골인지 체크
									checkB++;
									if (map[curYR + checkB][curXR] == '#') {//R만 골
										System.out.println(cnt + 1);
										return;
									} else if (map[curYR + checkB][curXR] == '.') {//R과 B사이에 길이 있으면
										continue;
									} else if (curYR + checkB == curYB) {//B도 같이 골
										bGoal = 1;
										break;
									}
								}
								break;
							}
						}
						//B 상방 확인
						if (bGoal == 0) {//B가 골이 아니면
							while (true) {
								tmpB++;
								if (map[curYB - tmpB][curXB] == '#') {//상벽에 닿으면
									xB = curXB;
									yB = curYB - tmpB + 1;
									break;
								} else if (curYB - tmpB == curYR - tmpR + 1) {//R과 닿으면
									xB = curYR - tmpR + 2;
									yB = curYB;
									break;
								} else if (map[curYB - tmpB][curXB] == '.') {//길이 있으면
									continue;
								} else if (map[curYB - tmpB][curXB] == 'O') {//골이면
									bGoal = 1;
									break;
								}
							}
							if (bGoal == 0) {// B가 골이 아니면 큐에 푸시
								q.add(xR); q.add(yR); q.add(xB); q.add(yB); q.add(cnt + 1);
							}
						}
					} else {// B가 위에 있으면
						// B 상방 확인
						xR = yR = xB = yB = bGoal = tmpR = tmpB = 0;
						while (true) {
							tmpB++;
							if (map[curYB - tmpB][curXB] == '#') {// 상벽에 닿으면
								xB = curXB;
								yB = curYB - tmpB + 1;
								break;
							} else if (map[curYB - tmpB][curXB] == '.') {// 길이 있으면
								continue;
							} else if (map[curYB - tmpB][curXB] == 'O') {// 골이면
								bGoal = 1;
								break;
							}
						}
						// R 상방 확인
						if(bGoal == 0){ // B가 골이 아니면
							while (true) {
								tmpR++;
								if (map[curYR - tmpR][curXR] == '#') {// 상벽에 닿으면
									xR = curXR;
									yR = curYR - tmpR + 1;
									break;
								} else if (curYR - tmpR == curYB - tmpB + 1) {//B와 닿으면
									xR = curYB - tmpB + 2;
									yR = curYB;
									break;
								} else if (map[curYR - tmpR][curXR] == '.') {// 길이 있으면
									continue;
								} else if (map[curYR - tmpR][curXR] == 'O') {// 골이면
									System.out.println(cnt + 1);
									return;
								}
							}
						}
						if (bGoal == 0) {// B가 골이 아니면 큐에 푸시
							q.add(xR); q.add(yR); q.add(xB); q.add(yB); q.add(cnt + 1);
						}
					}
				} else {// RB 같은 열에 없으면
					// R 상방 확인
					xR = yR = xB = yB = bGoal = tmpR = tmpB = 0;
					while (true) {
						tmpR++;
						if (map[curYR - tmpR][curXR] == '#') {
							xR = curXR;
							yR = curYR - tmpR + 1;
							break;
						} else if (map[curYR - tmpR][curXR] == '.') {
							continue;
						} else if (map[curYR - tmpR][curXR] == 'O') {// 골이면
							System.out.println(cnt + 1);
							return;
						}
					}
					// B 상방 확인
					while (true) {
						tmpB++;
						if (map[curYB - tmpB][curXB] == '#') {
							xB = curXB;
							yB = curYB - tmpB + 1;
							break;
						} else if (map[curYB - tmpB][curXB] == '.') {
							continue;
						} else if (map[curYB - tmpB][curXB] == 'O') {// 골이면
							bGoal = 1;
							break;
						}
					}
					if (bGoal == 0) {// B가 골이 아니면 큐에 푸시
						q.add(xR); q.add(yR); q.add(xB); q.add(yB); q.add(cnt + 1);
					}
				}

				// 하
				if (curXR == curXB) {//RB 같은 열에 있으면
					if (curYR > curYB) {//R이 아래에 있으면
						//R 하방 확인
						xR = yR = xB = yB = bGoal = tmpR = tmpB = 0;
						while (true) {
							tmpR++;
							if (map[curYR + tmpR][curXR] == '#') {//하벽에 닿으면
								xR = curXR;
								yR = curYR + tmpR - 1;
								break;
							} else if (map[curYR + tmpR][curXR] == '.') {//길이 있으면
								continue;
							} else if (map[curYR + tmpR][curXR] == 'O') {//골이면
								int checkB = 0;
								while (true) {//B가 같이 골인지 체크
									checkB++;
									if (map[curYR - checkB][curXR] == '#') {//R만 골
										System.out.println(cnt + 1);
										return;
									} else if (map[curYR - checkB][curXR] == '.') {//R과 B사이에 길이 있으면
										continue;
									} else if (curYR - checkB == curYB) {//B도 같이 골
										bGoal = 1;
										break;
									}
								}
								break;
							}
						}
						//B 하방 확인
						if (bGoal == 0) {//B가 골이 아니면
							while (true) {
								tmpB++;
								if (map[curYB + tmpB][curXB] == '#') {//하벽에 닿으면
									xB = curXB;
									yB = curYB + tmpB + 1;
									break;
								} else if (curYB + tmpB == curYR + tmpR - 1) {//R과 닿으면
									xB = curYR + tmpR - 2;
									yB = curYB;
									break;
								} else if (map[curYB + tmpB][curXB] == '.') {//길이 있으면
									continue;
								} else if (map[curYB + tmpB][curXB] == 'O') {//골이면
									bGoal = 1;
									break;
								}
							}
							if (bGoal == 0) {// B가 골이 아니면 큐에 푸시
								q.add(xR); q.add(yR); q.add(xB); q.add(yB); q.add(cnt + 1);
							}
						}
					} else {// B가 아래에 있으면
						// B 하방 확인
						xR = yR = xB = yB = bGoal = tmpR = tmpB = 0;
						while (true) {
							tmpB++;
							if (map[curYB + tmpB][curXB] == '#') {// 하벽에 닿으면
								xB = curXB;
								yB = curYB + tmpB - 1;
								break;
							} else if (map[curYB + tmpB][curXB] == '.') {// 길이 있으면
								continue;
							} else if (map[curYB + tmpB][curXB] == 'O') {// 골이면
								bGoal = 1;
								break;
							}
						}
						// R 하방 확인
						if(bGoal == 0){ // B가 골이 아니면
							while (true) {
								tmpR++;
								if (map[curYR + tmpR][curXR] == '#') {// 하벽에 닿으면
									xR = curXR;
									yR = curYR + tmpR - 1;
									break;
								} else if (curYR + tmpR == curYB + tmpB - 1) {//B와 닿으면
									xR = curYB + tmpB - 2;
									yR = curYB;
									break;
								} else if (map[curYR + tmpR][curXR] == '.') {// 길이 있으면
									continue;
								} else if (map[curYR + tmpR][curXR] == 'O') {// 골이면
									System.out.println(cnt + 1);
									return;
								}
							}
						}
						if (bGoal == 0) {// B가 골이 아니면 큐에 푸시
							q.add(xR); q.add(yR); q.add(xB); q.add(yB); q.add(cnt + 1);
						}
					}
				} else {// RB 같은 열에 없으면
					// R 하방 확인
					xR = yR = xB = yB = bGoal = tmpR = tmpB = 0;
					while (true) {
						tmpR++;
						if (map[curYR + tmpR][curXR] == '#') {
							xR = curXR;
							yR = curYR + tmpR - 1;
							break;
						} else if (map[curYR + tmpR][curXR] == '.') {
							continue;
						} else if (map[curYR + tmpR][curXR] == 'O') {// 골이면
							System.out.println(cnt + 1);
							return;
						}
					}
					// B 하방 확인
					while (true) {
						tmpB++;
						if (map[curYB + tmpB][curXB] == '#') {
							xB = curXB;
							yB = curYB + tmpB - 1;
							break;
						} else if (map[curYB + tmpB][curXB] == '.') {
							continue;
						} else if (map[curYB + tmpB][curXB] == 'O') {// 골이면
							bGoal = 1;
							break;
						}
					}
					if (bGoal == 0) {// B가 골이 아니면 큐에 푸시
						q.add(xR); q.add(yR); q.add(xB); q.add(yB); q.add(cnt + 1);
					}
				}
				// 좌
				if (curYR == curYB) {//RB 같은 행에 있으면
					if (curXR < curXB) {//R이 왼쪽에 있으면
						//R 좌방 확인
						xR = yR = xB = yB = bGoal = tmpR = tmpB = 0;
						while (true) {
							tmpR++;
							if (map[curYR][curXR - tmpR] == '#') {//좌벽에 닿으면
								xR = curXR - tmpR + 1;
								yR = curYR;
								break;
							} else if (map[curYR][curXR - tmpR] == '.') {//길이 있으면
								continue;
							} else if (map[curYR][curXR - tmpR] == 'O') {//골이면
								int checkB = 0;
								while (true) {//B가 같이 골인지 체크
									checkB++;
									if (map[curYR][curXR + checkB] == '#') {//R만 골
										System.out.println(cnt + 1);
										return;
									} else if (map[curYR][curXR + checkB] == '.') {//R과 B사이에 길이 있으면
										continue;
									} else if (curXR + checkB == curXB) {//B도 같이 골
										bGoal = 1;
										break;
									}
								}
								break;
							}
						}
						//B 좌방 확인
						if (bGoal == 0) {//B가 골이 아니면
							while (true) {
								tmpB++;
								if (map[curYB][curXB - tmpB] == '#') {//좌벽에 닿으면
									xB = curXB - tmpB + 1;
									yB = curYB;
									break;
								} else if (curXB - tmpB == curXR - tmpR + 1) {//R과 닿으면
									xB = curXB - tmpB + 2;
									yB = curYB;
									break;
								} else if (map[curYB][curXB - tmpB] == '.') {//길이 있으면
									continue;
								} else if (map[curYB][curXB - tmpB] == 'O') {//골이면
									bGoal = 1;
									break;
								}
							}
							if (bGoal == 0) {// B가 골이 아니면 큐에 푸시
								q.add(xR); q.add(yR); q.add(xB); q.add(yB); q.add(cnt + 1);
							}
						}
					} else {// B가 왼쪽에 있으면
						// B 좌방 확인
						xR = yR = xB = yB = bGoal = tmpR = tmpB = 0;
						while (true) {
							tmpB++;
							if (map[curYB][curXB - tmpB] == '#') {// 하벽에 닿으면
								xB = curXB - tmpB + 1;
								yB = curYB;
								break;
							} else if (map[curYB][curXB - tmpB] == '.') {// 길이 있으면
								continue;
							} else if (map[curYB][curXB - tmpB] == 'O') {// 골이면
								bGoal = 1;
								break;
							}
						}
						// R 좌방 확인
						if(bGoal == 0){ // B가 골이 아니면
							while (true) {
								tmpR++;
								if (map[curYR][curXR - tmpR] == '#') {// 좌벽에 닿으면
									xR = curXR - tmpR + 1;
									yR = curYR;
									break;
								} else if (curXR - tmpR == curXB - tmpB + 1) {//B와 닿으면
									xR = curXR - tmpR + 2;
									yR = curYB;
									break;
								} else if (map[curYR][curXR - tmpR] == '.') {// 길이 있으면
									continue;
								} else if (map[curYR][curXR - tmpR] == 'O') {// 골이면
									System.out.println(cnt + 1);
									return;
								}
							}
						}
						if (bGoal == 0) {// B가 골이 아니면 큐에 푸시
							q.add(xR); q.add(yR); q.add(xB); q.add(yB); q.add(cnt + 1);
						}
					}
				} else {// RB 같은 열에 없으면
					// R 좌방 확인
					xR = yR = xB = yB = bGoal = tmpR = tmpB = 0;
					while (true) {
						tmpR++;
						if (map[curYR][curXR - tmpR] == '#') {
							xR = curXR - tmpR + 1;
							yR = curYR;
							break;
						} else if (map[curYR][curXR - tmpR] == '.') {
							continue;
						} else if (map[curYR][curXR - tmpR] == 'O') {// 골이면
							System.out.println(cnt + 1);
							return;
						}
					}
					// B 좌방 확인
					while (true) {
						tmpB++;
						if (map[curYB][curXB - tmpB] == '#') {
							xB = curXB - tmpB + 1;
							yB = curYB;
							break;
						} else if (map[curYB][curXB - tmpB] == '.') {
							continue;
						} else if (map[curYB][curXB - tmpB] == 'O') {// 골이면
							bGoal = 1;
							break;
						}
					}
					if (bGoal == 0) {// B가 골이 아니면 큐에 푸시
						q.add(xR); q.add(yR); q.add(xB); q.add(yB); q.add(cnt + 1);
					}
				}

				// 우
				if (curYR == curYB) {//RB 같은 행에 있으면
					if (curXR > curXB) {//R이 오른쪽에 있으면
						//R 우방 확인
						xR = yR = xB = yB = bGoal = tmpR = tmpB = 0;
						while (true) {
							tmpR++;
							if (map[curYR][curXR + tmpR] == '#') {//우벽에 닿으면
								xR = curXR + tmpR - 1;
								yR = curYR;
								break;
							} else if (map[curYR][curXR + tmpR] == '.') {//길이 있으면
								continue;
							} else if (map[curYR][curXR + tmpR] == 'O') {//골이면
								int checkB = 0;
								while (true) {//B가 같이 골인지 체크
									checkB++;
									if (map[curYR][curXR - checkB] == '#') {//R만 골
										System.out.println(cnt + 1);
										return;
									} else if (map[curYR][curXR - checkB] == '.') {//R과 B사이에 길이 있으면
										continue;
									} else if (curXR - checkB == curXB) {//B도 같이 골
										bGoal = 1;
										break;
									}
								}
								break;
							}
						}
						//B 우방 확인
						if (bGoal == 0) {//B가 골이 아니면
							while (true) {
								tmpB++;
								if (map[curYB][curXB + tmpB] == '#') {//우벽에 닿으면
									xB = curXB + tmpB - 1;
									yB = curYB;
									break;
								} else if (curXB + tmpB == curXR + tmpR - 1) {//R과 닿으면
									xB = curXB + tmpB - 2;
									yB = curYB;
									break;
								} else if (map[curYB][curXB + tmpB] == '.') {//길이 있으면
									continue;
								} else if (map[curYB][curXB + tmpB] == 'O') {//골이면
									bGoal = 1;
									break;
								}
							}
							if (bGoal == 0) {// B가 골이 아니면 큐에 푸시
								q.add(xR); q.add(yR); q.add(xB); q.add(yB); q.add(cnt + 1);
							}
						}
					} else {// B가 오른쪽에 있으면
						// B 우방 확인
						xR = yR = xB = yB = bGoal = tmpR = tmpB = 0;
						while (true) {
							tmpB++;
							if (map[curYB][curXB + tmpB] == '#') {// 우벽에 닿으면
								xB = curXB + tmpB - 1;
								yB = curYB;
								break;
							} else if (map[curYB][curXB + tmpB] == '.') {// 길이 있으면
								continue;
							} else if (map[curYB][curXB + tmpB] == 'O') {// 골이면
								bGoal = 1;
								break;
							}
						}
						// R 우방 확인
						if(bGoal == 0){ // B가 골이 아니면
							while (true) {
								tmpR++;
								if (map[curYR][curXR + tmpR] == '#') {// 우벽에 닿으면
									xR = curXR + tmpR - 1;
									yR = curYR;
									break;
								} else if (curXR + tmpR == curXB + tmpB - 1) {//B와 닿으면
									xR = curXR + tmpR - 2;
									yR = curYB;
									break;
								} else if (map[curYR][curXR + tmpR] == '.') {// 길이 있으면
									continue;
								} else if (map[curYR][curXR + tmpR] == 'O') {// 골이면
									System.out.println(cnt + 1);
									return;
								}
							}
						}
						if (bGoal == 0) {// B가 골이 아니면 큐에 푸시
							q.add(xR); q.add(yR); q.add(xB); q.add(yB); q.add(cnt + 1);
						}
					}
				} else {// RB 같은 열에 없으면
					// R 우방 확인
					xR = yR = xB = yB = bGoal = tmpR = tmpB = 0;
					while (true) {
						tmpR++;
						if (map[curYR][curXR + tmpR] == '#') {
							xR = curXR + tmpR - 1;
							yR = curYR;
							break;
						} else if (map[curYR][curXR + tmpR] == '.') {
							continue;
						} else if (map[curYR][curXR + tmpR] == 'O') {// 골이면
							System.out.println(cnt + 1);
							return;
						}
					}
					// B 우방 확인
					while (true) {
						tmpB++;
						if (map[curYB][curXB + tmpB] == '#') {
							xB = curXB + tmpB - 1;
							yB = curYB;
							break;
						} else if (map[curYB][curXB + tmpB] == '.') {
							continue;
						} else if (map[curYB][curXB + tmpB] == 'O') {// 골이면
							bGoal = 1;
							break;
						}
					}
					if (bGoal == 0) {// B가 골이 아니면 큐에 푸시
						q.add(xR); q.add(yR); q.add(xB); q.add(yB); q.add(cnt + 1);
					}
				}
			}
		}
		System.out.println(-1); // 길이 없어서 큐에 아무것도 없을때
	}
}
